* 链式处理。关键代码
#+BEGIN_SRC kotlin
//RealInterceptorChain.kt
    val next = copy(index = index + 1, request = request)
    val interceptor = interceptors[index]

    @Suppress("USELESS_ELVIS")
    val response = interceptor.intercept(next) ?: throw NullPointerException(
        "interceptor $interceptor returned null")
#+END_SRC

Chain procced -> Interceoptor的interceptor方法并index + 1 -> Intercepotr.interceptor调用chain.procced。♻️

就像流水线，处理完交给下一个。

你如果处理晚了之后，要交给下一个，就调用 chain.procced方法即可。如果你不想交给下一个（比如命中了缓存），就直接返回Response.


* OkHttp 缓存
  
** 为什么LinkedHashMap可以实现Lru？
   最先插入，最先出来。


   
* Real do the request.
  
Key code is:
#+BEGIN_SRC kotlin
// RealConnection.kt.connecSocket() {}
    val rawSocket = when (proxy.type()) {
      Proxy.Type.DIRECT, Proxy.Type.HTTP -> address.socketFactory.createSocket()!!
      else -> Socket(proxy)
    }
#+END_SRC


  不得不提他的ConnecitonPool
** ConnectionPool
