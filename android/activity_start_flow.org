今天我们来看一下比较复杂的Activity的启动流程。ok，我们要看就看最复杂的，通过Action启动。hahah

** 发起
#+BEGIN_SRC java
Intent intent = new Intent(context);
intent.setAction(some_action);
startActivity(intent);
#+END_SRC

接着走到了这里
#+BEGIN_SRC java
// ContextImple.java
    @Override
    public void startActivity(Intent intent, Bundle options) {
        // ...
        mMainThread.getInstrumentation().execStartActivity(
                getOuterContext(), mMainThread.getApplicationThread(), null,
                (Activity) null, intent, -1, options);
    }
#+END_SRC


接着是这里
#+BEGIN_SRC java
// Instrumentation.java
    @UnsupportedAppUsage
    public ActivityResult execStartActivity(
            Context who, IBinder contextThread, IBinder token, Activity target,
            Intent intent, int requestCode, Bundle options) {
            ///
        try {
            int result = ActivityTaskManager.getService()
                .startActivity(whoThread, who.getBasePackageName(), intent,
                        intent.resolveTypeIfNeeded(who.getContentResolver()),
                        token, target != null ? target.mEmbeddedID : null,
                        requestCode, 0, null, options);
            checkStartActivityResult(result, intent);
        } catch (RemoteException e) {
            throw new RuntimeException("Failure from system", e);
        }
        return null;
    }
#+END_SRC


好了，发起完毕了。已经向安卓进程ActivityTaskManagerService发送了开启请求。

** 匹配并启动
*** 匹配
发生在安卓进程。
#+BEGIN_SRC java
// ActivityTaskManagerService
    int startActivityAsUser(IApplicationThread caller, String callingPackage,
            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,
            int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId,
            boolean validateIncomingUser) {
        enforceNotIsolatedCaller("startActivityAsUser");

        userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,
                Binder.getCallingPid(), Binder.getCallingUid(), "startActivityAsUser");

        // TODO: Switch to user app stacks here.
        return getActivityStartController().obtainStarter(intent, "startActivityAsUser")
                .setCaller(caller)
                .setCallingPackage(callingPackage)
                .setResolvedType(resolvedType)
                .setResultTo(resultTo)
                .setResultWho(resultWho)
                .setRequestCode(requestCode)
                .setStartFlags(startFlags)
                .setProfilerInfo(profilerInfo)
                .setActivityOptions(bOptions)
                .setMayWait(userId)
                .execute();

    }
#+END_SRC

接着委托到了这里
#+BEGIN_SRC java
// ActiviyStartController.java
    /**
     * @return A starter to configure and execute starting an activity. It is valid until after
     *         {@link ActivityStarter#execute} is invoked. At that point, the starter should be
     *         considered invalid and no longer modified or used.
     */
    ActivityStarter obtainStarter(Intent intent, String reason) {
        return mFactory.obtain().setIntent(intent).setReason(reason);
    }
#+END_SRC

接着到了ActivityStarter的execute方法里面了。委托到了startActivity方法里面

这个方法就是真正做事的方法了。比较长。我们看看关键的点。
#+BEGIN_SRC java
  // ActivityStarter.java
  private int startActivity(intent, ...) {
      // some permission check
      boolean abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,
              requestCode, callingPid, callingUid, callingPackage, ignoreTargetSecurity,
              inTask != null, callerApp, resultRecord, resultStack);
      abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,
              callingPid, resolvedType, aInfo.applicationInfo);
      abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,
              callingPackage);

              
              // 开始resolve Intent了
        ResolveInfo rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId,
                0 /* matchFlags */,
                        computeResolveFilterUid(
                                callingUid, realCallingUid, mRequest.filterCallingUid));


  }
#+END_SRC


** resolveIntent
   走到这里
   #+BEGIN_SRC java
     ResolveInfo resolveIntent(Intent intent, String resolvedType, int userId, int flags...) {
         return mService.getPackageManagerInternalLocked().resolveIntent(
             intent, resolvedType, modifiedFlags, userId, true, filterCallingUid);
     } 
   #+END_SRC

   所以走到最后，还是走到了PackageManagerService.queryIntentActivitiesInternal()

  里面用到了
#+BEGIN_SRC java
        CrossProfileIntentResolver resolver = mSettings.mCrossProfileIntentResolvers.get(userId);
        if (resolver != null) {
            return resolver.queryIntent(intent, resolvedType, false /*defaultOnly*/, userId);
        }
#+END_SRC

不知道是不是真正的query。我们进去看看

走到ComponentResolver.queryIntent -> Inten

有点复杂，我们跳过，看启动

*** 启动
