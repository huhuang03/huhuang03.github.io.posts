这里我们弄一个比较复杂的。开启一个Applicaiton做的事情。Ok，let deep in

当然走到了ActivityTaskManagerService.startActivity


    @Override
    public final int startActivity(IApplicationThread caller, String callingPackage,
            String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,
            String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo,
            Bundle bOptions) {
        return startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,
                resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions,
                UserHandle.getCallingUserId());
    }

当然里面加了一些设计模式，最后的逻辑代码地方：

private int startActivityAsUser(IApplicationThread caller, String callingPackage,
	@Nullable String callingFeatureId, Intent intent, String resolvedType,
	IBinder resultTo, String resultWho, int requestCode, int startFlags,
	ProfilerInfo profilerInfo, Bundle bOptions, int userId, boolean validateIncomingUser) {
    assertPackageMatchesCallingUid(callingPackage);
    enforceNotIsolatedCaller("startActivityAsUser");
    userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,
	    Binder.getCallingPid(), Binder.getCallingUid(), "startActivityAsUser");
    // TODO: Switch to user app stacks here.
    return getActivityStartController().obtainStarter(intent, "startActivityAsUser")
	    .setCaller(caller)
	    .setCallingPackage(callingPackage)
	    .setCallingFeatureId(callingFeatureId)
	    .setResolvedType(resolvedType)
	    .setResultTo(resultTo)
	    .setResultWho(resultWho)
	    .setRequestCode(requestCode)
	    .setStartFlags(startFlags)
	    .setProfilerInfo(profilerInfo)
	    .setActivityOptions(bOptions)
	    .setUserId(userId)
	    .execute();
}
    


ActivityStartController.obtainStarter().execute()


我们搞简单一点，找找他fork，并且创建虚拟机的地方。


/Users/hwf/source/obfuscator/tools/clang/lib/CodeGen/CGOpenMPRuntime.cpp
