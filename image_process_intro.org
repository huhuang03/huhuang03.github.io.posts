#+title: 图像处理简介
#+BEGIN_COMMENT
.. date: 2022-09-15
#+END_COMMENT

* 简介
- 图像处理是指对图像进行分析、加工、和处理，使其满足视觉、心理或其他要求的技术
- 目前大多数的图像均是以数字形式存储，我们今天分享的图像处理是简单的数字图像处理

* 什么是图像

[[./image_process/Lenna.jpg]]

- 图像是由一个个像素构成
- 像素点的值是对应点的颜色值

** 某一像素点的值
#+begin_src python :results output
import cv2

# 读取图片
img = cv2.imread('./image_process/Lenna.jpg')

# 0, 0点的值
print(f'[0, 0]坐标点像素值：{img[0, 1]}')

# 图像宽，高
h, w, _ = img.shape
print(f'图片宽高: {w}x{h}')
#+end_src

#+RESULTS:
: [0, 0]坐标点像素值：[130 137 224]
: 图片宽高: 316x316

** 遍历图像
#+begin_src python
import cv2
img = cv2.imread('./image_process/Lenna.jpg')
h, w, _ = img.shape
for row in range(0, h):
    for col in range(0, w):
        print(img[row, col])
#+end_src

** 灰度图像
[[https://zh.wikipedia.org/wiki/%E7%81%B0%E5%BA%A6%E5%9B%BE%E5%83%8F][灰度（Gray scale）数字图像]]是每个像素只有一个采样颜色的图像。 这类图像通常显示为从最暗黑色到最亮的白色的灰度
用于显示的灰度图像通常用每个采样像素8 bits来保存，这样可以有256种灰度（8bits就是2的8次方=256）

彩色转灰度：

#+begin_center
Gray = R*0.299 + G*0.587 + B*0.114
#+end_center

#+begin_src python :results output
import cv2
import numpy as np
img = cv2.imread('./image_process/Lenna.jpg')

h, w, _ = img.shape
gray_img = np.empty([h, w], np.uint8)
for row in range(0, h):
    for col in range(0, w):
        b, g, r = img[row, col]
        gray = r * 0.299 + g * 0.587 + b * 0.114
        gray_img[row, col] = gray

cv2.imshow('origin img', img)
cv2.imshow('gray img', gray_img)
cv2.moveWindow('gray img', 500, 50)

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:

** 阈值(threshold)
遍历灰度图像，如果超过某个阈值（比如180）。则设置为白色（255），否则为黑色（0）
#+begin_src python
import cv2
import numpy as np


img = cv2.imread('image_process/Lenna_gray.jpg', cv2.IMREAD_GRAYSCALE)

threshold = 180

output = np.empty(img.shape, np.uint8)

h, w = img.shape
while True:
    for r in range(0, h):
        for c in range(0, w):
            gray = img[r, c]
            if gray < threshold:
                output[r, c] = 0
            else:
                output[r, c] = 255

    cv2.imshow('img', img)
    cv2.imshow('threshold', output)
    cv2.setWindowTitle('threshold', f'threshold: {threshold}')
    # cv2.displayOverlay('threshold', f'threshold: {threshold}')
    key = cv2.waitKey(0) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('+'):
        threshold += 1
    elif key == ord('-'):
        threshold -= 1

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: None

** 从摄像头读取
[[./image_process/threshold.py]]
#+begin_src python
import cv2
import numpy as np

cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print('Cannot open camera')
    exit()

ret, frame = cap.read()
threshold = 180
output = np.empty(frame.shape, np.uint8)

h, w, _ = frame.shape
while True:
    gray_img = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    mask = gray_img > threshold
    mask = mask.astype(np.uint8)
    mask *= 255

    cv2.imshow('img', gray_img)
    cv2.imshow('threshold', mask)
    cv2.setWindowTitle('threshold', f'threshold: {threshold}')
    ret, frame = cap.read()

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('+'):
        threshold += 1
    elif key == ord('-'):
        threshold -= 1

cap.release()
cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: None

* 图像处理
** 卷积操作
[[https://en.wikipedia.org/wiki/Kernel_(image_processing)][卷积操作]]是将一个kernel和图片进行convolution的操作。

[[./image_process/convolution_legend.png]]

#+ATTR_HTML: :width 600
[[https://commons.wikimedia.org/wiki/File:2D_Convolution_Animation.gif][2D_Convolution_Animation.gif]]
[[./image_process/2D_Convolution_Animation.gif]]

** 模糊
我们先按照自己的直觉来进行图像的模糊，将图像的每个点的值改为它周围值的平均。
这样我的kenrel定义为

| 1/9 | 1/9 | 1/9 |
| 1/9 | 1/9 | 1/9 |
| 1/9 | 1/9 | 1/9 |

我们来试一下

#+begin_src python
import cv2
import numpy as np

img = cv2.imread('image_process/Lenna.jpg')
kernel = np.array([
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9]])
# kernel = np.ones([3, 3], np.float32) / 9

output = cv2.filter2D(img, -1, kernel)

cv2.imshow('origin', img)
cv2.imshow('output', output)

cv2.moveWindow('origin', 50, 50)
cv2.moveWindow('output', 500, 50)

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: None

*** 高斯模糊
[[https://zh.m.wikipedia.org/zh-hans/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A][高斯模糊]] 使用正态分布计算kernel的值，离中心越远，权重越小
#+begin_src python
import cv2
img = cv2.imread('image_process/Lenna.jpg')

output = cv2.GaussianBlur(img, [5, 5], 0)
cv2.imshow('origin', img)
cv2.imshow('gaussia blur', output)

cv2.moveWindow('origin', 50, 50)
cv2.moveWindow('gaussia blur', 500, 50)

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: None


** 边缘检测
[[https://zh.m.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B][边缘检测]]

[[https://classroom.udacity.com/courses/ud810/lessons/1536a507-a6a2-4e75-8840-f7fdad1f031d/concepts/34873d4d-b649-49a2-9219-8e9e8cab9b53][图例]]

#+begin_src python
import cv2
import numpy as np

img = cv2.imread('image_process/Lenna_gray.jpg')

def apply_kernel(kernel, window_name):
    output = cv2.filter2D(img, -1, kernel)
    cv2.imshow(window_name, output)

cv2.imshow('origin', img)

apply_kernel(np.array([
    [0, 0, 0],
    [0, -1, 1],
    [0, 0, 0]
]), 'simple')
apply_kernel(np.array([
    [0, 0, 0],
    [-1/2.0, 0, 1/2.0],
    [0, 0, 0],
]), 'simple 1')

# sobel
apply_kernel(np.array([
    [-1, 0, 1],
    [-2, 0, 2],
    [-1, 0, 1],
]), 'sobel')

# prewitt
apply_kernel(np.array([
    [-1, 0, 1],
    [-1, 0, 1],
    [-1, 0, 1],
]), 'prewitt')

apply_kernel(np.array([
    [1, 1, 1],
    [0, 0, 0],
    [-1, -1, -1],
]), 'prewitt y direction')

apply_kernel(np.array([
    [0, 1],
    [-1, 0],
]), 'roberts')

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: None

** hsv格式
假如我有个需求，将照片中红色区域标识出来。用RGB就并不合适，因为我们无法找到一个合适的绿色区间。
这样我们可以将图片转为hsv，h范围在50-70我们认为是绿色

#+begin_src python :results output
import cv2
import numpy as np

img = cv2.imread('image_process/Lenna.jpg')
hsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

low = np.array([0, 100, 100])
upper = np.array([10, 255, 255])

mask1 = cv2.inRange(hsv_img, low, upper)
mask2 = cv2.inRange(hsv_img, np.array([160, 100, 100]), np.array([180, 255, 255]))
mask = mask1 | mask2

output = cv2.bitwise_and(img, img, mask=mask)

print(mask.dtype)
cv2.imshow('mask', mask)

# output = cv2.GaussianBlur(img, [5, 5], 0)
cv2.imshow('origin', img)
cv2.imshow('output', output)
# cv2.imshow('gaussia blur', output)

# cv2.moveWindow('origin', 50, 50)
# cv2.moveWindow('gaussia blur', 500, 50)

cv2.waitKey(0)
cv2.destroyAllWindows()
#+end_src

#+RESULTS:
: uint8

*** 绿幕去除
#+begin_src python :results output
import cv2
import numpy as np
from time import time as timer

gif = cv2.VideoCapture('image_process/beijing.gif')
fps = gif.get(cv2.CAP_PROP_FPS)
bg = cv2.imread('image_process/')

# 795 x 640
while True:
    now = timer()
    ret, frame = gif.read()
    if ret:
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        print(hsv_frame.shape)
        mask = cv2.inRange(hsv_frame, np.array([50, 50, 50]), np.array([70, 255, 255]))
        mask = ~mask
        output_frame = cv2.bitwise_and(frame, frame, mask=mask)
        # cv2.imshow('mask', mask)
        # cv2.imshow('hsv', hsv_frame)
        cv2.imshow('origin', frame)
        cv2.imshow('output', output_frame)
    else:
        gif.set(cv2.CAP_PROP_POS_FRAMES, 0)

    if cv2.waitKey(int(fps)) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
        
#+end_src

#+RESULTS:
#+begin_example
#+end_example



* 例子
** 车牌识别

* 参考
- [[https://zh.m.wikipedia.org/zh/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86][wiki 图像处理]]
- [[https://classroom.udacity.com/courses/ud810/lessons/1536a507-a6a2-4e75-8840-f7fdad1f031d/concepts/34873d4d-b649-49a2-9219-8e9e8cab9b53][Udacity Introduction to Computer Vision]]

* 演示用的备忘
- https://www.youtube.com/watch?v=vz9aLmxYJB0&t=345s

- ~C-u C-c C-o~ open link in new buffer
- ~org-toggle-inline-images~ 显示图片

