* splitlines
#+begin_src c
  // unicodeobject.c
  static PyObject*
  unicode_splitlines(PyObject *self, PyObject *args, PyObject *kwds)
  {
      static char *kwlist[] = {"keepends", 0};
      int keepends = 0;

      if (!PyArg_ParseTupleAndKeywords(args, kwds, "|i:splitlines",
                                       kwlist, &keepends))
          return NULL;

      return PyUnicode_Splitlines(self, keepends);
  }

  PyObject *
  PyUnicode_Splitlines(PyObject *string, int keepends)
  {
      PyObject *list;

      if (ensure_unicode(string) < 0)
          return NULL;

      switch (PyUnicode_KIND(string)) {
      case PyUnicode_1BYTE_KIND:
          if (PyUnicode_IS_ASCII(string))
              list = asciilib_splitlines(
                  string, PyUnicode_1BYTE_DATA(string),
                  PyUnicode_GET_LENGTH(string), keepends);
          else
              list = ucs1lib_splitlines(
                  string, PyUnicode_1BYTE_DATA(string),
                  PyUnicode_GET_LENGTH(string), keepends);
          break;
      case PyUnicode_2BYTE_KIND:
          list = ucs2lib_splitlines(
              string, PyUnicode_2BYTE_DATA(string),
              PyUnicode_GET_LENGTH(string), keepends);
          break;
      case PyUnicode_4BYTE_KIND:
          list = ucs4lib_splitlines(
              string, PyUnicode_4BYTE_DATA(string),
              PyUnicode_GET_LENGTH(string), keepends);
          break;
      default:
          assert(0);
          list = 0;
      }
      return list;
  }

  // For now, I can't find how the ucs2lib_splitlines is defined.
#+end_src
  
