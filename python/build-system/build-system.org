The python build system has some tools like:
- setuptools
- distutils
- pip

And frontend config is some thing like
- setup.py
- setup.cfg
- pyproject.toml

And the frontend command has:
- pip install [-e .]
- python setup.py [build | install | build_ext]

It's like a mess. So let's figure out.

I think the situation is: python want remove setup.py style, but fornow, it's not finished.

So maybe need use pyproject.toml as much as possible.

* setuptools
klass = Distribution

_setup_distribution = dist = klass(attrs)

dist.run_commands()


        cmd_obj = self.get_command_obj(command)
        cmd_obj.ensure_finalized()
        cmd_obj.run()


	    klass = self.get_command_class(command)
            cmd_obj = self.command_obj[command] = klass(self)



	    klass = self.cmdclass.get(command)


** init cmdclass map
        for pkgname in self.get_command_packages():
            module_name = "%s.%s" % (pkgname, command)
            klass_name = command

            try:
                __import__(module_name)
                module = sys.modules[module_name]
            except ImportError:
                continue

            try:
                klass = getattr(module, klass_name)
            except AttributeError:
                raise DistutilsModuleError(
                    "invalid command '%s' (no class '%s' in module '%s')"
                    % (command, klass_name, module_name))

            self.cmdclass[command] = klass
            return klass

So the default command class is: `distutils.command.${commandName}`


Go on. see install.py


** build command

#+begin_src python
def build_extension(self, ext):
    sources = ext.sources

    # from distutils._msvccompiler import MSVCCompiler
    objects = self.compiler.compile(sources,
                                        output_dir=self.build_temp,
                                        macros=macros,
                                        include_dirs=ext.include_dirs,
                                        debug=self.debug,
                                        extra_postargs=extra_args,
                                        depends=ext.depends)

#+end_src


* pip
wheel_editable.py:

with backend.subprocess_runner(runner):

* build-backend
How ~pip install~ like command parse pyproject.toml

* Refres
- [[https://peps.python.org/pep-0517/][PEP 517 - A build-system independent format for source trees]]
