a simplest demo:
#+begin_src html
<div id="app">
  {{ message }}
</div>


<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>  

<script>
var app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
  }
})
</script>  
#+end_src


new Vue(options) -> this._init(options) -> $mount('#app')

* $mount('#app')
$mount(queryIfIsString('#app'))

if el is string and el.startsWith('#)

template = getOuterHeml(el): template = "<div>{{message}}</div>"

render = createRenderByTemplte()

So the key is createRenderByTemplte

template -> ast -> renderFunction


# Vue is defined at ~src/core/instance/index.js~

# #+begin_src 
# function Vue (options) {
#   this._init(options)
# }
# #+end_src

# new -> _init -> $mount

# * web-compiler $mount
# // el el is app HTMLElement
# vm.el = query(el);
# // vm real call compiler_to_render("{{message}}")
# vm.$options.render = compiler_to_render(getOuterHTML(el))
# // call core $mount
# vm.$mount(el, hydrating = undefined)

# * core $mount 
# // lifecycle.js
# call mountComponent() -> new Watcher()

# * Wathcer
# // vm._render() return vm.reander()
# call vm._update(vm._render())

# ** _render
# this will create a VNode(tag: 'div', children: [VNode(text: "\n Hello Vue\n")])

# * _update
# call vm.__patch(vm.$el, vnode)


# * __patch__
# createEle(vode, insertedVnodeQueue, oldElm._leaveCb?: null: parentElm$1, nodeOps.nextSibling(oldElm))

# ** createElm
# This is a amazing function, which can create elm by vnode.

# This will loop through vnode and create correspond elm and insert to parent


