这片博客，我们讨论如何去hook jni_onload方法。

首先，我们要hook一个方法，需要去知道一个方法的地址，通过
#+BEGIN_SRC 
Interceptor.attach(ptr('ptr'), {
  onEnter: function (args) {
    send(args[0].toInt32());
  }
});
#+END_SRC

所以我们需要知道so的基址 + 方法偏移就知道一个方法的地址了。

所以我们的时机就是libxxx.so加载了。但是jni_onload还没有执行。

所以我们的思路可以是： hook dlopen() 得到hook时机。

关键代码：
#+BEGIN_SRC js
var func_dlopen = Module.findExportByName('libc.so', 'dlopen')

var isLibxxx = false
Interceptor.attach(func_dlopen, {
    onEnter: (args) => {
        var soPath = args[0].readCString()
        isLibxxx = soPath.includes("libxxx.so")
    },
    onLeave: (retval) => {
        if (isLibxxx) {
            var moduleLibxxx = Process.findModuleByName("libxxx.so")
            console.log(`moduleLibxxx: ${moduleLibxxx}`);
            console.log(`moduleLibxxx base: ${moduleLibxxx.base}`);
            console.log(`moduleLibxxx size: ${moduleLibxxx.size}`);
            // console.log(`retval to int: ${retval.readInt()}`);
            var magicFunc = moduleLibxxx.base.add(0x23b0)
            console.log(`magicFunc: ${magicFunc}`);
            Interceptor.attach(magicFunc, {
                onEnter: (args) => {
                }
            })
        }
    }
});
#+END_SRC
